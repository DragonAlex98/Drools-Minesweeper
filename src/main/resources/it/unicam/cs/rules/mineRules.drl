package test

import it.unicam.cs.model.Grid;
import it.unicam.cs.model.Square;
import it.unicam.cs.model.Number;
import it.unicam.cs.model.Neighbor;
import it.unicam.cs.enumeration.SquareType;
import it.unicam.cs.enumeration.SquareState;
import it.unicam.cs.model.Location;
import it.unicam.cs.enumeration.GameState;
import java.util.ArrayList;

rule "register north"
    agenda-group "register neighbor"
when
    $square: Square( $location : location )
    $north : Square( location.getRow()  == ($location.getRow() - 1), location.getColumn() == $location.getColumn() )
then
    insert( new Neighbor( $square, $north ) );
    insert( new Neighbor( $north, $square ) );
end

rule "register north east"
    agenda-group "register neighbor"
when
    $square: Square( $location : location )
    $northEast : Square( location.getRow()  == ($location.getRow() - 1), location.getColumn() == ( $location.getColumn() + 1 ) )
then
    insert( new Neighbor( $square, $northEast ) );
    insert( new Neighbor( $northEast, $square ) );
end

rule "register north west"
    agenda-group "register neighbor"
when
    $square: Square( $location : location )
    $northWest : Square( location.getRow()  == ($location.getRow() - 1), location.getColumn() == ( $location.getColumn() - 1 ) )
then
    insert( new Neighbor( $square, $northWest ) );
    insert( new Neighbor( $northWest, $square ) );
end

rule "register west"
    agenda-group "register neighbor"
when
    $square: Square( $location : location )
    $west : Square( location.getRow()  == $location.getRow(), location.getColumn() == ( $location.getColumn() - 1 ) )
then
    insert( new Neighbor( $square, $west ) );
    insert( new Neighbor( $west, $square ) );
end

rule "Uncover Empty"
	salience 100
    agenda-group "UNCOVER"
    no-loop
	when
    	$loc: Location( )
    	$theSquare: Square(location == $loc, type == SquareType.EMPTY, state == SquareState.COVERED)
    	Neighbor(square == $theSquare, $neighbor : neighbor)
	then
    	modify ($theSquare) {setState(SquareState.UNCOVERED)}
end

rule "Uncover Empty neigh"
	salience 100
    agenda-group "UNCOVER"
	when
    	$loc: Location( )
    	$theSquare: Square(location == $loc, type == SquareType.EMPTY, state == SquareState.UNCOVERED)
    	Neighbor(square == $theSquare, $neighbor : neighbor)
    	Square(location == $neighbor.getLocation(), state == SquareState.COVERED )
	then
    	insert(new Location($neighbor.getLocation().getRow(), $neighbor.getLocation().getColumn()));
end

rule "Uncover Bomb"
	salience 25
	agenda-group "UNCOVER"
	when
		$loc : Location( )
		$theSquare: Square(location == $loc, type == SquareType.BOMB, state == SquareState.COVERED)
	then
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup("UNCOVER").clear();
		modify ($theSquare) {setState(SquareState.EXPLODED)}
		retract($loc);
end

rule "Uncover Number"
	salience 50
	agenda-group "UNCOVER"
	no-loop
	when
		$loc : Location( )
		$theSquare: Square(location == $loc, type == SquareType.NUMBER, state == SquareState.COVERED)
	then
		modify ($theSquare) {setState(SquareState.UNCOVERED)}
		retract($loc);
end

rule "Clear"
	salience 0
	when
		$loc : Location( )
	then
		retract($loc);
end

rule "Flag"
	agenda-group "FLAG"
	lock-on-active
	when
		$loc : Location( )
		$theSquare: Square(location == $loc, state == SquareState.COVERED)
	then
		modify ($theSquare) {setState(SquareState.FLAGGED)}
		retract($loc);
end

rule "Unflag"
	agenda-group "FLAG"
	lock-on-active
	when
		$loc : Location( )
		$theSquare: Square(location == $loc, state == SquareState.FLAGGED)
	then
		modify ($theSquare) {setState(SquareState.COVERED)}
		retract($loc);
end

rule "Chord"
	agenda-group "CHORD"
	when
		$loc : Location( )
		$theSquare : Number(location == $loc, type == SquareType.NUMBER, state == SquareState.UNCOVERED)
		$squares : ArrayList() from accumulate($square : Square() and Neighbor(square == $theSquare, neighbor == $square),
			init(ArrayList list = new ArrayList();),
			action(list.add($square);),
			result(list));
		
		$countFlaggedSquares : Long() from accumulate(Square(state == SquareState.FLAGGED) from $squares, count(1))
		eval($theSquare.getNeighbourBombsCount() == $countFlaggedSquares)
		$coveredSquares : ArrayList( size() > 0 ) from collect(Square(state == SquareState.COVERED) from $squares)
	then
		$coveredSquares.forEach(s -> insert(((Square)s).getLocation()));
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup("UNCOVER").setFocus();
end

rule "LOSS"
	agenda-group "LOSS"
	when
		$square : Square(state == SquareState.COVERED, type == SquareType.BOMB)
	then
		modify ($square) {setState(SquareState.UNCOVERED)}
end

rule "WIN"
	agenda-group "WIN"
	when
		$square : Square(state == SquareState.COVERED)
	then
		modify ($square) {setState(SquareState.FLAGGED)}
end
